{"version":3,"sources":["../node_modules/web3-eth-accounts/src sync","assets/icon-true.svg","serviceWorker.js","index.js","App.js","Whitelist.js","actions.js"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","Boolean","window","location","hostname","match","ReactDOM","render","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","Content","Layout","Header","Option","Form","Item","Tabs","TabPane","Select","init","shareholders","tokens","undefined","editingShareholder","tokenIndex","fetching","userAddress","reducer","state","action","type","actions","CONNECTING","tip","CONNECTED","payload","TOKEN_SELECTED","SHAREHOLDERS_FETCHED","ERROR","RESET","dispatch","a","networkConfigs","1","polymathRegistryAddress","42","browserUtils","getNetworkId","networkId","getCurrentAddress","currentWallet","config","polyClient","Polymath","connect","getSecurityTokens","owner","fetchShareholders","st","getShareholders","map","shareholder","Object","assign","canReceiveAfter","moment","canSendAfter","kycExpiry","useReducer","modifyData","shareholderData","queue","run","useEffect","global","token","className","spinning","size","style","backgroundColor","display","flexDirection","justifyContent","color","padding","autoFocus","showSearch","width","marginBottom","placeholder","optionFilterProp","onChange","index","filterOption","input","option","props","children","toLowerCase","indexOf","i","value","key","symbol","length","modifyWhitelist","Column","Table","Text","Typography","formItemLayout","labelCol","xs","span","sm","wrapperCol","formatDate","format","formatBool","theme","defaultShareholderValues","address","add","canBuyFromSto","isAccredited","WhitelistForm","create","name","this","visible","onCancel","onOk","form","awaitingConfirmation","editedRecord","shareholderExists","defaultValues","getFieldDecorator","title","okText","confirmLoading","label","rules","required","validator","rule","callback","web3Utils","isAddress","initialValue","disabled","valuePropName","React","Component","Whitelist","editIndex","closeForm","setState","formRef","resetFields","openForm","submitForm","validateFields","err","values","toDate","error","message","saveFormRef","find","element","toUpperCase","filter","alignSelf","onClick","dataSource","rowKey","dataIndex","text","toChecksumAddress","record","wrappedComponentRef"],"mappings":"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","file":"static/js/main.6385e07b.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 1004;","module.exports = __webpack_public_path__ + \"static/media/icon-true.948f1865.svg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, {useReducer, useEffect} from 'react';\nimport { Layout, Input, Button, Form, Icon, Tabs, Select, Spin } from 'antd';\nimport { Polymath, browserUtils } from '@polymathnetwork/sdk';\nimport moment from 'moment';\n\nimport actions from './actions';\nimport Whitelist from './Whitelist';\n\nconst { Content, Header } = Layout;\nconst { Item } = Form;\nconst { TabPane } = Tabs;\nconst { Option } = Select;\n\nfunction init() {\n  return {\n    shareholders: [],\n    tokens: undefined,\n    editingShareholder: false,\n    tokenIndex: undefined,\n    fetching: false,\n    userAddress: ''\n  };\n}\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case actions.CONNECTING:\n      return { ...state, tip: 'Loading your tokens...', fetching: true }\n    case actions.CONNECTED:\n      return { \n        ...state,\n        ...action.payload,\n        fetching: false\n      }\n    case actions.TOKEN_SELECTED:\n      const { tokenIndex } = action.payload\n      return { ...state, tokenIndex, tip: 'Loading investors whitelist...', fetching: true }\n    case actions.SHAREHOLDERS_FETCHED:\n      const { shareholders } = action.payload\n      return { ...state, shareholders, fetching: false }\n    case actions.ERROR:\n        return { ...state, fetching: false }\n    case actions.RESET:\n      return init();\n    default:\n      throw new Error(`Unrecognised action \"${action.type}\"`);\n  }\n}\n\nasync function connect(dispatch) {\n  dispatch({type: actions.CONNECTING});\n\n  const networkConfigs = {\n    1: {\n      polymathRegistryAddress: '0x240f9f86b1465bf1b8eb29bc88cbf65573dfdd97'\n    },\n    42: {\n      polymathRegistryAddress: '0x5b215a7d39ee305ad28da29bf2f0425c6c2a00b3'\n    },\n  };\n  const networkId = await browserUtils.getNetworkId();\n  const currentWallet = await browserUtils.getCurrentAddress();\n  const config = networkConfigs[networkId];\n  const polyClient = new Polymath();\n  await polyClient.connect(config);\n  const tokens = await polyClient.getSecurityTokens({owner: currentWallet});\n\n  dispatch({type: actions.CONNECTED, payload: {\n    networkId,\n    polyClient,\n    tokens,\n    userAddress: currentWallet,\n  }});\n\n}\n\nasync function fetchShareholders(dispatch, st) {\n  let shareholders = await st.shareholders.getShareholders();\n  shareholders = shareholders.map(shareholder => {\n    const ret = Object.assign({}, shareholder, {\n      canReceiveAfter: moment(shareholder.canReceiveAfter),\n      canSendAfter: moment(shareholder.canSendAfter),\n      kycExpiry: moment(shareholder.kycExpiry)\n    })\n    return ret;\n  });\n  \n  dispatch({\n    type: actions.SHAREHOLDERS_FETCHED,\n    payload: { shareholders }\n  })\n}\n\nfunction App() {\n  const [state, dispatch] = useReducer(reducer, init(), init);\n  const  { shareholders, tokens, tokenIndex, fetching, tip, userAddress } = state;\n \n\n  useEffect(() => {\n    connect(dispatch);\n  }, []);\n\n  useEffect(() => {\n    if (tokenIndex) {\n      fetchShareholders(dispatch, tokens[tokenIndex]);\n      // @TODO remove this\n      global.token = tokens[tokenIndex];\n    }\n  }, [tokens, tokenIndex]);\n\n  async function modifyWhitelist(shareholders) {\n    try {\n      const queue = await tokens[tokenIndex].shareholders.modifyData({shareholderData: shareholders});\n      await queue.run();\n      fetchShareholders(dispatch, tokens[tokenIndex]);\n    }\n    catch(error) {\n      return error;\n    }\n  }\n\n  function generateTokensSelectOptions() {\n    const options = !tokens ? [] : tokens.map((token, i) => \n      <Option value={i} key={i}>{token.symbol}</Option>)\n    return options\n  }\n\n  return (\n    <div className=\"App\">\n      <Spin spinning={fetching} tip={tip} size=\"large\">\n        <Layout>\n          <Header style={{backgroundColor: 'white', display: 'flex', flexDirection: 'row', justifyContent: 'flex-end'}}>\n            <span style={{color: '#1348E4'}}>{userAddress}</span>\n          </Header>\n          <Content style={{ padding: 50, backgroundColor: '#FAFDFF' }}>\n            <Select\n              autoFocus\n              showSearch\n              style={{ width: 200, marginBottom: 50 }}\n              placeholder=\"Select a token\"\n              optionFilterProp=\"children\"\n              onChange={(index) => dispatch({ type: actions.TOKEN_SELECTED, payload: { tokenIndex: index }})}\n              filterOption={(input, option) =>\n                option.props.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\n              }\n            >\n              {generateTokensSelectOptions()}\n            </Select>\n            { shareholders.length > 0 && \n              <Whitelist modifyWhitelist={modifyWhitelist} shareholders={shareholders} /> }\n          </Content>\n        </Layout>\n      </Spin>\n    </div>\n  );\n}\n\nexport default App;\n","import React, { Fragment } from 'react';\nimport moment from 'moment';\nimport { utils as web3Utils } from 'web3';\nimport { Table, Button, Form, Input, DatePicker, Checkbox, Modal, Typography, Spin, Icon, message } from 'antd';\nimport TrueSVG from './assets/icon-true.svg';\n\nconst {Column} = Table;\nconst {Item} = Form;\nconst {Text} = Typography;\n\nconst formItemLayout = {\n    labelCol: {\n        xs: { span: 24 },\n        sm: { span: 8 },\n    },\n    wrapperCol: {\n        xs: { span: 24 },\n        sm: { span: 16 },\n    },\n};\n\nfunction formatDate(input) {\n    return moment(input).format('YYYY-MM-DD');\n}\n\nfunction formatBool(input) {\n    return input ? \n        <Fragment><Icon style={{color: '#00AA5E'}} type=\"check-circle\" theme=\"filled\"/><span>   Yes</span></Fragment> :\n        <Fragment><Icon style={{color: '#DB2C3E'}} type=\"close-circle\" theme=\"filled\"/><span>   No</span></Fragment>;\n}\n\nconst defaultShareholderValues = {\n    address: '',\n    canSendAfter: moment().add(1, 'hour'),\n    canReceiveAfter: moment().add(1, 'hour'),\n    kycExpiry: moment().add(1, 'year'),\n    canBuyFromSto: true,\n    isAccredited: false\n}\n\nconst WhitelistForm = Form.create({ name: 'form_in_modal' })(\n    class extends React.Component {\n        \n        render() {\n            const { visible,\n                onCancel,\n                onOk, form,\n                awaitingConfirmation,\n                editedRecord,\n                shareholderExists\n            } = this.props;\n            let defaultValues = editedRecord || defaultShareholderValues;\n            \n            const { getFieldDecorator } = form;\n            return ( \n            <Modal\n                title={editedRecord ? \"Edit shareholder\" : \"Add a new shareholder\"}\n                okText=\"Save\"\n                visible={visible}\n                onCancel={onCancel}\n                onOk={onOk}\n                confirmLoading={awaitingConfirmation}\n            >\n                <Spin spinning={awaitingConfirmation} size=\"large\">\n                <Form {...formItemLayout}>\n                    <Item name=\"address\" label=\"Address\">\n                        {getFieldDecorator('address', {\n                            rules: [\n                                { required: true  },\n                                {\n                                    validator: (rule, value, callback) => {\n                                        if (!editedRecord && !web3Utils.isAddress(value)) {\n                                            callback('Address is invalid')\n                                            return;\n                                        }\n                                        callback()\n                                        return;\n                                    }\n                                },\n                                {\n                                    validator: (rule, value, callback) => {\n                                        if (!editedRecord && shareholderExists(value)) {\n                                            callback('Shareholder is already present in the whitelist')\n                                            return;\n                                        }\n                                        callback()\n                                        return;\n                                    }\n                                }\n                            ],\n                            initialValue: defaultValues.address\n                        })(\n                            <Input disabled={!!editedRecord}/>\n                        )}\n                    </Item>\n                    <Item name=\"canSendAfter\"  label=\"Can Send after\">\n                        {getFieldDecorator('canSendAfter', {\n                            rules: [{ required: true }],\n                            initialValue: defaultValues.canSendAfter\n                        })(\n                            <DatePicker />\n                        )}\n                    </Item>\n                    <Item name=\"canReceiveAfter\" label=\"Can Receive adter\">\n                        {getFieldDecorator('canReceiveAfter', {\n                            rules: [{ required: true }],\n                            initialValue: defaultValues.canReceiveAfter\n                        })(\n                            <DatePicker />\n                        )}\n                    </Item>\n                    <Item name=\"kycExpiry\" label=\"KYC Expiry\">\n                        {getFieldDecorator('kycExpiry', {\n                            rules: [{ required: true }],\n                            initialValue: defaultValues.kycExpiry\n                        })(\n                            <DatePicker />\n                        )}\n                    </Item>\n                    <Item name=\"canBuyFromSto\" label=\"Can Buy from STO\">\n                        {getFieldDecorator('canBuyFromSto', {\n                            valuePropName: 'checked',\n                            initialValue: defaultValues.canBuyFromSto\n                        })(\n                            <Checkbox/>\n                        )}\n                    </Item>\n                    <Item name=\"isAccredited\" label=\"Accredited\">\n                        {getFieldDecorator('isAccredited', {\n                            valuePropName: 'checked',\n                            initialValue: defaultValues.isAccredited\n                        })(\n                            <Checkbox />\n                        )}\n                    </Item>\n                </Form>\n                </Spin>\n            </Modal>\n        )}\n    }\n);\n\nexport default class Whitelist extends React.Component {\n    state = {\n        editIndex: '',\n        visible: false,\n        awaitingConfirmation: false,\n    }\n\n    closeForm = () => {\n        this.setState({\n            editIndex: '',\n            visible: false,\n            awaitingConfirmation: false\n        });\n        const { form } = this.formRef.props;\n        form.resetFields();\n    }\n\n    openForm = (index = '') => {\n        this.setState({\n            visible: true,\n            editIndex: index\n        });\n    }\n\n    submitForm = async () => {\n        const { form } = this.formRef.props;\n        const { modifyWhitelist } = this.props;\n        form.validateFields(async (err, values) => {\n            if (err) {\n                return;\n            }\n\n            this.setState({ awaitingConfirmation: true })\n        \n            values.canSendAfter = values.canSendAfter.toDate();\n            values.canReceiveAfter = values.canReceiveAfter.toDate();\n            values.kycExpiry = values.kycExpiry.toDate();\n\n            const error = await modifyWhitelist([values]);\n            if (error) {\n                this.setState({\n                    awaitingConfirmation: false,\n                });\n                message.error(error.message)\n            }\n            else {\n                this.setState({\n                    visible: false,\n                    awaitingConfirmation: false,\n                    editIndex: ''\n                });\n                form.resetFields();\n            }\n\n        });\n    };\n\n    saveFormRef = formRef => {\n        this.formRef = formRef;\n    };\n\n    shareholderExists = (address) => {\n        const { shareholders } = this.props\n        const ret =  shareholders.find((element) => element.address.toUpperCase() === address.toUpperCase())\n         !== undefined\n        return ret\n    }\n    \n    render() {\n        const { visible, awaitingConfirmation, editIndex } = this.state;\n        \n        const {shareholders} = this.props;\n        let editedRecord = shareholders.filter(shareholder => shareholder.address === editIndex)[0]\n\n        return <div style={{display: 'flex', flexDirection: 'column'}}>\n            <Button type=\"primary\" style={{marginBottom: 20, alignSelf: 'flex-end'}} onClick={() => this.openForm()}>Add new</Button>\n            <Table dataSource={shareholders} rowKey=\"address\">\n                <Column\n                    title='Address'\n                    dataIndex='address'\n                    key='address'\n                    render={(text) => <Text>{web3Utils.toChecksumAddress(text)}</Text>}\n                />\n                <Column\n                    title='Can send after'\n                    dataIndex='canSendAfter'\n                    key='canSendAfter'\n                    render={(text) => formatDate(text)}\n                />\n                <Column\n                    title='Can receive after'\n                    dataIndex='canReceiveAfter'\n                    key='canReceiveAfter'\n                    render={(text) => formatDate(text)}\n                />\n                <Column\n                    title='KYC expiry'\n                    dataIndex='kycExpiry'\n                    key='kycExpiry'\n                    render={(text) => formatDate(text)}\n                />\n                <Column\n                    title='Can buy from STO'\n                    dataIndex='canBuyFromSto'\n                    key='canBuyFromSto'\n                    render={(text) => formatBool(text)}\n                />\n                <Column\n                    title='Is accredited'\n                    dataIndex='isAccredited'\n                    key='isAccredited'\n                    render={(text) => formatBool(text)}\n                />\n                <Column render={(text, record) => {\n                    return <Button onClick={() => this.openForm(record.address)}>\n                        <Icon type=\"edit\" />\n                    </Button>\n                }}/>\n            </Table>\n            <WhitelistForm \n                wrappedComponentRef={this.saveFormRef}\n                visible={visible}\n                onCancel={this.closeForm}\n                onOk={this.submitForm}\n                awaitingConfirmation={awaitingConfirmation}\n                editedRecord={editedRecord}\n                shareholderExists={this.shareholderExists}\n            />\n        </div>;\n    }\n}","export default {\n    CONNECTING: 'connecting',\n    CONNECTED: 'connected',\n    RESET: 'reset',\n    ERROR: 'error',\n    SHAREHOLDERS_FETCHED: 'shareholders_fetched',\n    TOKEN_SELECTED: 'token_selected',\n}"],"sourceRoot":""}