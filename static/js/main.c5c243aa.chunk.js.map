{"version":3,"sources":["../node_modules/web3-eth-accounts/src sync","serviceWorker.js","index.js","App.js","Whitelist.js","config.js","actions.js"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","Boolean","window","location","hostname","match","ReactDOM","render","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","Content","Layout","Header","Option","Select","init","shareholders","tokens","undefined","editingShareholder","tokenIndex","fetching","userAddress","polyClient","connected","error","networkId","reducer","state","action","type","actions","CONNECTING","tip","connecting","CONNECTED","payload","CONNECTION_ERROR","TOKEN_SELECTED","SHAREHOLDERS_FETCHED","ERROR","RESET","dispatch","a","browserUtils","getNetworkId","getCurrentAddress","currentWallet","includes","config","networkConfigs","Polymath","connect","getSecurityTokens","owner","message","fetchShareholders","st","getShareholders","map","shareholder","Object","assign","canReceiveAfter","moment","canSendAfter","kycExpiry","Network","toString","Text","style","marginRight","marginLeft","0","1","42","User","useReducer","modifyData","shareholderData","queue","run","address","isAccredited","canBuyFromSto","useEffect","global","token","className","spinning","size","backgroundColor","display","flexDirection","justifyContent","alignItems","padding","autoFocus","showSearch","width","marginBottom","placeholder","optionFilterProp","onChange","index","filterOption","input","option","props","children","toLowerCase","indexOf","i","value","key","symbol","modifyWhitelist","deleteShareholders","Column","Table","Item","Form","Typography","formItemLayout","labelCol","xs","span","sm","wrapperCol","formatDate","format","formatBool","color","theme","defaultShareholderValues","add","WhitelistForm","create","name","this","visible","onCancel","onOk","form","awaitingConfirmation","editedRecord","shareholderExists","defaultValues","getFieldDecorator","title","okText","confirmLoading","label","rules","required","validator","rule","callback","web3Utils","isAddress","initialValue","disabled","valuePropName","React","Component","Whitelist","editIndex","closeForm","setState","formRef","resetFields","openForm","submitForm","validateFields","err","values","toDate","saveFormRef","find","element","toUpperCase","filter","alignSelf","onClick","dataSource","rowKey","dataIndex","text","toChecksumAddress","record","wrappedComponentRef","polymathRegistryAddress"],"mappings":"wGAAA,SAASA,EAAoBC,GAC5B,IAAIC,EAAI,IAAIC,MAAM,uBAAyBF,EAAM,KAEjD,MADAC,EAAEE,KAAO,mBACHF,EAEPF,EAAoBK,KAAO,WAAa,MAAO,IAC/CL,EAAoBM,QAAUN,EAC9BO,EAAOC,QAAUR,EACjBA,EAAoBS,GAAK,M,+FCILC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAACC,EAAA,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,gB,8wBE1HXC,EAAoBC,IAApBD,QAASE,EAAWD,IAAXC,OACTC,EAAWC,IAAXD,OAER,SAASE,IACP,MAAO,CACLC,aAAc,GACdC,YAAQC,EACRC,oBAAoB,EACpBC,gBAAYF,EACZG,UAAU,EACVC,YAAa,GACbC,gBAAYL,EACZM,WAAW,EACXC,MAAO,GACPC,UAAW,GAIf,SAASC,EAAQC,EAAOC,GACtB,OAAQA,EAAOC,MACb,KAAKC,IAAQC,WACX,OAAO,EAAP,GACKJ,EADL,CAEEK,IAAK,gBACLC,YAAY,EACZT,WAAOP,IAEX,KAAKa,IAAQI,UACX,OAAO,EAAP,GACKP,EADL,GAEKC,EAAOO,QAFZ,CAGEF,YAAY,EACZD,SAAKf,EACLO,WAAOP,IAEX,KAAKa,IAAQM,iBAEX,OAAO,EAAP,GACKT,EADL,CAEEH,MAHgBI,EAAOO,QAAjBX,MAINS,YAAY,IAEhB,KAAKH,IAAQO,eAEX,OAAO,EAAP,GACKV,EADL,CAEER,WAHqBS,EAAOO,QAAtBhB,WAINa,IAAK,iCACLZ,UAAU,IAEd,KAAKU,IAAQQ,qBAEX,OAAO,EAAP,GACKX,EADL,CAEEZ,aAHuBa,EAAOO,QAAxBpB,aAINK,UAAU,EACVY,SAAKf,IAET,KAAKa,IAAQS,MACT,OAAO,EAAP,GAAYZ,EAAZ,CAAmBP,UAAU,IACjC,KAAKU,IAAQU,MACX,MAzDG,CACLzB,aAAc,GACdC,YAAQC,EACRC,oBAAoB,EACpBC,gBAAYF,EACZG,UAAU,EACVC,YAAa,GACbC,gBAAYL,EACZM,WAAW,EACXC,MAAO,GACPC,UAAW,GAgDX,QACE,MAAM,IAAIvC,MAAJ,+BAAkC0C,EAAOC,KAAzC,O,2CAIZ,WAAuBY,GAAvB,uBAAAC,EAAA,4DACED,EAAS,CAACZ,KAAMC,IAAQC,aAD1B,kBAI4BY,eAAaC,eAJzC,cAIUnB,EAJV,gBAKgCkB,eAAaE,oBAL7C,UAKUC,EALV,OAMS,EAAE,EAAG,EAAG,IAAIC,SAAStB,GAN9B,wBAOMgB,EAAS,CAAEZ,KAAMC,IAAQM,iBAAkBD,QAAS,CAAEX,MAAO,mDAPnE,kCAWUwB,EAASC,IAAexB,GACxBH,EAAa,IAAI4B,WAZ3B,UAaU5B,EAAW6B,QAAQH,GAb7B,yBAcyB1B,EAAW8B,kBAAkB,CAACC,MAAOP,IAd9D,QAcU9B,EAdV,OAgBIyB,EAAS,CAACZ,KAAMC,IAAQI,UAAWC,QAAS,CAC1CV,YACAH,aACAN,SACAK,YAAayB,KApBnB,kDAwBIL,EAAS,CAAEZ,KAAMC,IAAQM,iBAAkBD,QAAS,CAAEX,MAAO,KAAM8B,WAxBvE,yD,+BA4BeC,E,+EAAf,WAAiCd,EAAUe,GAA3C,eAAAd,EAAA,qEAC2Bc,EAAGzC,aAAa0C,kBAD3C,OAEE1C,GADIA,EADN,QAE8B2C,IAAI,SAAAC,GAM9B,OALYC,OAAOC,OAAO,GAAIF,EAAa,CACzCG,gBAAiBC,IAAOJ,EAAYG,iBACpCE,aAAcD,IAAOJ,EAAYK,cACjCC,UAAWF,IAAOJ,EAAYM,eAKlCxB,EAAS,CACPZ,KAAMC,IAAQQ,qBACdH,QAAS,CAAEpB,kBAbf,0C,sBAiBA,SAASmD,EAAT,GAA+B,IAAbzC,EAAY,EAAZA,UAChBA,EAAYA,EAAU0C,WAMtB,OACE,kBAAC,WAAD,KACE,kBAAC,IAAD,CAAMtC,KAAK,WACX,kBAAC,IAAWuC,KAAZ,CAAiBC,MAAO,CAAEC,YAAa,EAAGC,WAAY,KARzC,CACfC,EAAG,eACHC,EAAG,UACHC,GAAI,SAKoEjD,KAK5E,SAASkD,EAAT,GAA8B,IAAftD,EAAc,EAAdA,YACb,OAAIA,EAEA,kBAAC,WAAD,KACE,kBAAC,IAAD,CAAMQ,KAAK,SACX,kBAAC,IAAWuC,KAAZ,CAAiBC,MAAO,CAAEC,YAAa,EAAGC,WAAY,KAAOlD,IAG5D,KAwFMrB,IArFf,WAAgB,IAAD,EACa4E,qBAAWlD,EAvI9B,CACLX,aAAc,GACdC,YAAQC,EACRC,oBAAoB,EACpBC,gBAAYF,EACZG,UAAU,EACVC,YAAa,GACbC,gBAAYL,EACZM,WAAW,EACXC,MAAO,GACPC,UAAW,GA6HyCX,GADzC,mBACNa,EADM,KACCc,EADD,KAEJ1B,EAA+FY,EAA/FZ,aAAcC,EAAiFW,EAAjFX,OAAQG,EAAyEQ,EAAzER,WAAYC,EAA6DO,EAA7DP,SAAUY,EAAmDL,EAAnDK,IAAKX,EAA8CM,EAA9CN,YAAaY,EAAiCN,EAAjCM,WAAYT,EAAqBG,EAArBH,MAAOC,EAAcE,EAAdF,UAF7E,2CAgBb,WAA+BV,GAA/B,eAAA2B,EAAA,qEACsB1B,EAAOG,GAAYJ,aAAa8D,WAAW,CAACC,gBAAiB/D,IADnF,cACQgE,EADR,gBAEQA,EAAMC,MAFd,uBAGQzB,EAAkBd,EAAUzB,EAAOG,IAH3C,0CAhBa,iEAsBb,WAAkCJ,GAAlC,eAAA2B,EAAA,4DACE3B,EAAeA,EAAa2C,IAAI,SAAAC,GAAW,MAAK,CAC9CsB,QAAStB,EAAYsB,QACrBnB,gBAAiB,EACjBE,aAAc,EACdC,UAAW,EACXiB,aAAc,EACdC,cAAe,KAPnB,SAUsBnE,EAAOG,GAAYJ,aAAa8D,WAAW,CAACC,gBAAiB/D,IAVnF,cAUQgE,EAVR,gBAWQA,EAAMC,MAXd,uBAYQzB,EAAkBd,EAAUzB,EAAOG,IAZ3C,0CAtBa,sBA2Cb,OAvCAiE,oBAAU,Y,oCACRjC,CAAQV,IACP,IAEH2C,oBAAU,gBACWnE,IAAfE,IACFoC,EAAkBd,EAAUzB,EAAOG,IAEnCkE,EAAOC,MAAQtE,EAAOG,KAEvB,CAACH,EAAQG,IA8BV,yBAAKoE,UAAU,OACb,kBAAC,IAAD,CAAMC,SAAUpE,GAAYa,EAAYD,IAAKA,EAAKyD,KAAK,SACrD,kBAAC,IAAD,KACE,kBAAC9E,EAAD,CAAQ0D,MAAO,CAACqB,gBAAiB,QAASC,QAAS,OAAQC,cAAe,MAAOC,eAAgB,WAAYC,WAAY,WACvH,kBAAC5B,EAAD,CAASzC,UAAWA,IACpB,kBAACkD,EAAD,CAAMtD,YAAaA,KAErB,kBAACZ,EAAD,CAAS4D,MAAO,CAAE0B,QAAS,GAAIL,gBAAiB,YAC5ClE,GAAS,kBAAC,IAAD,CACT8B,QAAS9B,EACTK,KAAK,UAELR,GACA,kBAAC,IAAD,CACE2E,WAAS,EACTC,YAAU,EACV5B,MAAO,CAAE6B,MAAO,IAAKC,aAAc,IACnCC,YAAY,iBACZC,iBAAiB,WACjBC,SAAU,SAACC,GAAD,OAAW9D,EAAS,CAAEZ,KAAMC,IAAQO,eAAgBF,QAAS,CAAEhB,WAAYoF,MACrFC,aAAc,SAACC,EAAOC,GAAR,OACZA,EAAOC,MAAMC,SAASC,cAAcC,QAAQL,EAAMI,gBAAkB,IA3BjE7F,EAAcA,EAAO0C,IAAI,SAAC4B,EAAOyB,GAAR,OACxC,kBAACnG,EAAD,CAAQoG,MAAOD,EAAGE,IAAKF,GAAIzB,EAAM4B,UADT,SAiCDjG,IAAfE,GACA,kBAAC,IAAD,CACEgG,gBAzED,4CA0ECC,mBA1ED,4CA2ECrG,aAAcA,W,2SCzNvBsG,EAAUC,IAAVD,OACAE,EAAQC,IAARD,KACAnD,EAAQqD,IAARrD,KAEDsD,EAAiB,CACnBC,SAAU,CACNC,GAAI,CAAEC,KAAM,IACZC,GAAI,CAAED,KAAM,IAEhBE,WAAY,CACRH,GAAI,CAAEC,KAAM,IACZC,GAAI,CAAED,KAAM,MAIpB,SAASG,EAAWvB,GAChB,OAAO1C,IAAO0C,GAAOwB,OAAO,cAGhC,SAASC,EAAWzB,GAChB,OAAOA,EACH,kBAAC,WAAD,KAAU,kBAAC,IAAD,CAAMpC,MAAO,CAAC8D,MAAO,WAAYtG,KAAK,eAAeuG,MAAM,WAAU,yCAC/E,kBAAC,WAAD,KAAU,kBAAC,IAAD,CAAM/D,MAAO,CAAC8D,MAAO,WAAYtG,KAAK,eAAeuG,MAAM,WAAU,wCAGvF,IAAMC,EAA2B,CAC7BpD,QAAS,GACTjB,aAAcD,MAASuE,IAAI,EAAG,QAC9BxE,gBAAiBC,MAASuE,IAAI,EAAG,QACjCrE,UAAWF,MAASuE,IAAI,EAAG,QAC3BnD,eAAe,EACfD,cAAc,GAGZqD,EAAgBf,IAAKgB,OAAO,CAAEC,KAAM,iBAApBjB,CAAA,iLAGJ,IAAD,EAODkB,KAAK/B,MANDgC,EADH,EACGA,QACJC,EAFC,EAEDA,SACAC,EAHC,EAGDA,KAAMC,EAHL,EAGKA,KACNC,EAJC,EAIDA,qBACAC,EALC,EAKDA,aACAC,EANC,EAMDA,kBAEAC,EAAgBF,GAAgBX,EAE5Bc,EAAsBL,EAAtBK,kBACR,OACA,kBAAC,IAAD,CACIC,MAAOJ,EAAe,mBAAqB,wBAC3CK,OAAO,OACPV,QAASA,EACTC,SAAUA,EACVC,KAAMA,EACNS,eAAgBP,GAEhB,kBAAC,IAAD,CAAMvD,SAAUuD,EAAsBtD,KAAK,SAC3C,kBAAC,IAASiC,EACN,kBAACH,EAAD,CAAMkB,KAAK,UAAUc,MAAM,WACtBJ,EAAkB,UAAW,CAC1BK,MAAO,CACH,CAAEC,UAAU,GACZ,CACIC,UAAW,SAACC,EAAM3C,EAAO4C,GAChBZ,GAAiBa,QAAUC,UAAU9C,GAI1C4C,IAHIA,EAAS,wBAOrB,CACIF,UAAW,SAACC,EAAM3C,EAAO4C,GAChBZ,IAAgBC,EAAkBjC,GAIvC4C,IAHIA,EAAS,sDAQzBG,aAAcb,EAAcjE,SAxB/BkE,CA0BG,kBAAC,IAAD,CAAOa,WAAYhB,MAG3B,kBAACzB,EAAD,CAAMkB,KAAK,eAAgBc,MAAM,kBAC5BJ,EAAkB,eAAgB,CAC/BK,MAAO,CAAC,CAAEC,UAAU,IACpBM,aAAcb,EAAclF,cAF/BmF,CAIG,kBAAC,IAAD,QAGR,kBAAC5B,EAAD,CAAMkB,KAAK,kBAAkBc,MAAM,qBAC9BJ,EAAkB,kBAAmB,CAClCK,MAAO,CAAC,CAAEC,UAAU,IACpBM,aAAcb,EAAcpF,iBAF/BqF,CAIG,kBAAC,IAAD,QAGR,kBAAC5B,EAAD,CAAMkB,KAAK,YAAYc,MAAM,cACxBJ,EAAkB,YAAa,CAC5BK,MAAO,CAAC,CAAEC,UAAU,IACpBM,aAAcb,EAAcjF,WAF/BkF,CAIG,kBAAC,IAAD,QAGR,kBAAC5B,EAAD,CAAMkB,KAAK,gBAAgBc,MAAM,oBAC5BJ,EAAkB,gBAAiB,CAChCc,cAAe,UACfF,aAAcb,EAAc/D,eAF/BgE,CAIG,kBAAC,IAAD,QAGR,kBAAC5B,EAAD,CAAMkB,KAAK,eAAec,MAAM,cAC3BJ,EAAkB,eAAgB,CAC/Bc,cAAe,UACfF,aAAcb,EAAchE,cAF/BiE,CAIG,kBAAC,IAAD,eA5FN,GACJe,IAAMC,YAqGHC,E,2MACjBzI,MAAQ,CACJ0I,UAAW,GACX1B,SAAS,EACTI,sBAAsB,G,EAG1BuB,UAAY,WACR,EAAKC,SAAS,CACVF,UAAW,GACX1B,SAAS,EACTI,sBAAsB,IAET,EAAKyB,QAAQ7D,MAAtBmC,KACH2B,e,EAGTC,SAAW,WAAiB,IAAhBnE,EAAe,uDAAP,GAChB,EAAKgE,SAAS,CACV5B,SAAS,EACT0B,UAAW9D,K,EAInBoE,W,qBAAa,8BAAAjI,EAAA,qDACDoG,EAAS,EAAK0B,QAAQ7D,MAAtBmC,KACA3B,EAAoB,EAAKR,MAAzBQ,gBACR2B,EAAK8B,eAAL,sCAAoB,WAAOC,EAAKC,GAAZ,SAAApI,EAAA,yDACZmI,EADY,wDAKhB,EAAKN,SAAS,CAAExB,sBAAsB,IAEtC+B,EAAO9G,aAAe8G,EAAO9G,aAAa+G,SAC1CD,EAAOhH,gBAAkBgH,EAAOhH,gBAAgBiH,SAChDD,EAAO7G,UAAY6G,EAAO7G,UAAU8G,SATpB,kBAYN5D,EAAgB,CAAC2D,IAZX,OAaZ,EAAKP,SAAS,CACV5B,SAAS,EACTI,sBAAsB,EACtBsB,UAAW,KAEfvB,EAAK2B,cAlBO,kDAqBZ,EAAKF,SAAS,CACVxB,sBAAsB,IAE1BzF,IAAQ9B,MAAM,KAAM8B,SAxBR,wDAApB,yDAHS,yC,EAgCb0H,YAAc,SAAAR,GACV,EAAKA,QAAUA,G,EAGnBvB,kBAAoB,SAAChE,GAIjB,YADKhE,IAFoB,EAAK0F,MAAtB5F,aACkBkK,KAAK,SAACC,GAAD,OAAaA,EAAQjG,QAAQkG,gBAAkBlG,EAAQkG,iB,wEAKhF,IAAD,SACgDzC,KAAK/G,MAAlDgH,EADH,EACGA,QAASI,EADZ,EACYA,qBAAsBsB,EADlC,EACkCA,UADlC,EAGwC3B,KAAK/B,MAA1C5F,EAHH,EAGGA,aACJiI,GAJC,EAGiB5B,mBACHrG,EAAaqK,OAAO,SAAAzH,GAAW,OAAIA,EAAYsB,UAAYoF,IAAW,IAEzF,OAAO,yBAAKhG,MAAO,CAACsB,QAAS,OAAQC,cAAe,WAChD,kBAAC,IAAD,CAAQ/D,KAAK,UAAUwC,MAAO,CAAC8B,aAAc,GAAIkF,UAAW,YAAaC,QAAS,kBAAM,EAAKZ,aAA7F,WACA,kBAAC,IAAD,CAAOa,WAAYxK,EAAcyK,OAAO,WACpC,kBAACnE,EAAD,CACI+B,MAAM,UACNqC,UAAU,UACVxE,IAAI,UACJlH,OAAQ,SAAC2L,GAAD,OAAU,kBAACtH,EAAD,KAAOyF,QAAU8B,kBAAkBD,OAEzD,kBAACrE,EAAD,CACI+B,MAAM,iBACNqC,UAAU,eACVxE,IAAI,eACJlH,OAAQ,SAAC2L,GAAD,OAAU1D,EAAW0D,MAEjC,kBAACrE,EAAD,CACI+B,MAAM,oBACNqC,UAAU,kBACVxE,IAAI,kBACJlH,OAAQ,SAAC2L,GAAD,OAAU1D,EAAW0D,MAEjC,kBAACrE,EAAD,CACI+B,MAAM,aACNqC,UAAU,YACVxE,IAAI,YACJlH,OAAQ,SAAC2L,GAAD,OAAU1D,EAAW0D,MAEjC,kBAACrE,EAAD,CACI+B,MAAM,mBACNqC,UAAU,gBACVxE,IAAI,gBACJlH,OAAQ,SAAC2L,GAAD,OAAUxD,EAAWwD,MAEjC,kBAACrE,EAAD,CACI+B,MAAM,gBACNqC,UAAU,eACVxE,IAAI,eACJlH,OAAQ,SAAC2L,GAAD,OAAUxD,EAAWwD,MAEjC,kBAACrE,EAAD,CAAQtH,OAAQ,SAAC2L,EAAME,GACnB,OACI,kBAAC,WAAD,KACI,kBAAC,IAAD,CAAQN,QAAS,kBAAM,EAAKZ,SAASkB,EAAO3G,WACxC,kBAAC,IAAD,CAAMpD,KAAK,OAAOuG,MAAM,iBAS5C,kBAACG,EAAD,CACIsD,oBAAqBnD,KAAKsC,YAC1BrC,QAASA,EACTC,SAAUF,KAAK4B,UACfzB,KAAMH,KAAKiC,WACX5B,qBAAsBA,EACtBC,aAAcA,EACdC,kBAAmBP,KAAKO,yB,GApIDiB,IAAMC,Y,iCC7I7C,gCAAO,IAAMlH,EAAiB,CAC1BwB,EAAG,CACCqH,wBAAyB,8CAE7BpH,GAAI,CACAoH,wBAAyB,gD,6KCLlB,KACX/J,WAAY,aACZG,UAAW,YACXE,iBAAkB,mBAClBI,MAAO,QACPD,MAAO,QACPD,qBAAsB,uBACtBD,eAAgB,mB","file":"static/js/main.c5c243aa.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 1003;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, {useReducer, useEffect, Fragment} from 'react';\nimport { Layout, Select, Spin, Alert, Icon, Typography } from 'antd';\nimport { Polymath, browserUtils } from '@polymathnetwork/sdk';\nimport moment from 'moment';\n\nimport actions from './actions';\nimport Whitelist from './Whitelist';\nimport { networkConfigs } from './config';\n\nconst { Content, Header } = Layout;\nconst { Option } = Select;\n\nfunction init() {\n  return {\n    shareholders: [],\n    tokens: undefined,\n    editingShareholder: false,\n    tokenIndex: undefined,\n    fetching: false,\n    userAddress: '',\n    polyClient: undefined,\n    connected: false,\n    error: '',\n    networkId: 0\n  };\n}\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case actions.CONNECTING:\n      return { \n        ...state,\n        tip: 'Connecting...',\n        connecting: true,\n        error: undefined\n      }\n    case actions.CONNECTED:\n      return { \n        ...state,\n        ...action.payload,\n        connecting: false,\n        tip: undefined,\n        error: undefined,\n      }\n    case actions.CONNECTION_ERROR:\n      const { error } = action.payload;\n      return {\n        ...state,\n        error,\n        connecting: false,\n      }\n    case actions.TOKEN_SELECTED:\n      const { tokenIndex } = action.payload\n      return { \n        ...state,\n        tokenIndex,\n        tip: 'Loading investors whitelist...',\n        fetching: true \n      }\n    case actions.SHAREHOLDERS_FETCHED:\n      const { shareholders } = action.payload\n      return { \n        ...state,\n        shareholders,\n        fetching: false,\n        tip: undefined\n      }\n    case actions.ERROR:\n        return { ...state, fetching: false }\n    case actions.RESET:\n      return init();\n    default:\n      throw new Error(`Unrecognised action \"${action.type}\"`);\n  }\n}\n\nasync function connect(dispatch) {\n  dispatch({type: actions.CONNECTING});\n\n  try {\n    const networkId = await browserUtils.getNetworkId();\n    const currentWallet = await browserUtils.getCurrentAddress();\n    if (![-1, 1, 42].includes(networkId)) {\n      dispatch({ type: actions.CONNECTION_ERROR, payload: { error: 'Please switch to either Main or Kovan network' }})\n      return;\n    }\n\n    const config = networkConfigs[networkId];\n    const polyClient = new Polymath();\n    await polyClient.connect(config);\n    const tokens = await polyClient.getSecurityTokens({owner: currentWallet});\n\n    dispatch({type: actions.CONNECTED, payload: {\n      networkId,\n      polyClient,\n      tokens,\n      userAddress: currentWallet,\n    }});\n  }\n  catch(error) {\n    dispatch({ type: actions.CONNECTION_ERROR, payload: { error: error.message }})\n  }\n}\n\nasync function fetchShareholders(dispatch, st) {\n  let shareholders = await st.shareholders.getShareholders();\n  shareholders = shareholders.map(shareholder => {\n    const ret = Object.assign({}, shareholder, {\n      canReceiveAfter: moment(shareholder.canReceiveAfter),\n      canSendAfter: moment(shareholder.canSendAfter),\n      kycExpiry: moment(shareholder.kycExpiry)\n    })\n    return ret;\n  });\n  \n  dispatch({\n    type: actions.SHAREHOLDERS_FETCHED,\n    payload: { shareholders }\n  })\n}\n\nfunction Network({networkId}) {\n  networkId = networkId.toString();\n  const networks = {\n    0: 'Disconnected',\n    1: 'Mainnet',\n    42: 'Kovan'\n  }\n  return (\n    <Fragment>\n      <Icon type=\"global\" />\n      <Typography.Text style={{ marginRight: 5, marginLeft: 10 }}>{networks[networkId]}</Typography.Text>\n    </Fragment>\n  );\n}\n\nfunction User({userAddress}) {\n  if (userAddress)\n    return (\n      <Fragment>\n        <Icon type=\"user\" />\n        <Typography.Text style={{ marginRight: 5, marginLeft: 10 }}>{userAddress}</Typography.Text>\n      </Fragment>\n    );\n  return null;\n}\n\nfunction App() {\n  const [state, dispatch] = useReducer(reducer, init(), init);\n  const  { shareholders, tokens, tokenIndex, fetching, tip, userAddress, connecting, error, networkId } = state;\n \n  useEffect(() => {\n    connect(dispatch);\n  }, []);\n\n  useEffect(() => {\n    if (tokenIndex !== undefined) {\n      fetchShareholders(dispatch, tokens[tokenIndex]);\n      // @TODO remove this\n      global.token = tokens[tokenIndex];\n    }\n  }, [tokens, tokenIndex]);\n\n  async function modifyWhitelist(shareholders) {\n    const queue = await tokens[tokenIndex].shareholders.modifyData({shareholderData: shareholders});\n    await queue.run();\n    await fetchShareholders(dispatch, tokens[tokenIndex]);\n  }\n\n  async function deleteShareholders(shareholders) {\n    shareholders = shareholders.map(shareholder => ({\n      address: shareholder.address,\n      canReceiveAfter: 0,\n      canSendAfter: 0,\n      kycExpiry: 0,\n      isAccredited: 0,\n      canBuyFromSto: 0\n    }));\n\n    const queue = await tokens[tokenIndex].shareholders.modifyData({shareholderData: shareholders});\n    await queue.run();\n    await fetchShareholders(dispatch, tokens[tokenIndex]);\n  }\n\n  function generateTokensSelectOptions() {\n    const options = !tokens ? [] : tokens.map((token, i) => \n      <Option value={i} key={i}>{token.symbol}</Option>)\n    return options\n  }\n\n  return (\n    <div className=\"App\">\n      <Spin spinning={fetching || connecting} tip={tip} size=\"large\">\n        <Layout>\n          <Header style={{backgroundColor: 'white', display: 'flex', flexDirection: 'row', justifyContent: 'flex-end', alignItems: 'center'}}>\n            <Network networkId={networkId} />\n            <User userAddress={userAddress} />\n          </Header>\n          <Content style={{ padding: 50, backgroundColor: '#FAFDFF' }}>\n            { error && <Alert\n              message={error}\n              type=\"error\"\n            />}\n            { userAddress &&\n              <Select\n                autoFocus\n                showSearch\n                style={{ width: 200, marginBottom: 50 }}\n                placeholder=\"Select a token\"\n                optionFilterProp=\"children\"\n                onChange={(index) => dispatch({ type: actions.TOKEN_SELECTED, payload: { tokenIndex: index }})}\n                filterOption={(input, option) =>\n                  option.props.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\n                }\n              >\n                {generateTokensSelectOptions()}\n              </Select> \n            }\n            { tokenIndex !== undefined && \n              <Whitelist\n                modifyWhitelist={modifyWhitelist}\n                deleteShareholders={deleteShareholders}\n                shareholders={shareholders}\n              />\n            }\n          </Content>\n        </Layout>\n      </Spin>\n    </div>\n  );\n}\n\nexport default App;\n","import React, { Fragment } from 'react';\nimport moment from 'moment';\nimport { utils as web3Utils } from 'web3';\nimport { Table, Button, Form, Input, DatePicker, Checkbox, Modal, Typography, Spin, Icon, message } from 'antd';\n\nconst {Column} = Table;\nconst {Item} = Form;\nconst {Text} = Typography;\n\nconst formItemLayout = {\n    labelCol: {\n        xs: { span: 24 },\n        sm: { span: 8 },\n    },\n    wrapperCol: {\n        xs: { span: 24 },\n        sm: { span: 16 },\n    },\n};\n\nfunction formatDate(input) {\n    return moment(input).format('YYYY-MM-DD');\n}\n\nfunction formatBool(input) {\n    return input ? \n        <Fragment><Icon style={{color: '#00AA5E'}} type=\"check-circle\" theme=\"filled\"/><span>   Yes</span></Fragment> :\n        <Fragment><Icon style={{color: '#DB2C3E'}} type=\"close-circle\" theme=\"filled\"/><span>   No</span></Fragment>;\n}\n\nconst defaultShareholderValues = {\n    address: '',\n    canSendAfter: moment().add(1, 'hour'),\n    canReceiveAfter: moment().add(1, 'hour'),\n    kycExpiry: moment().add(1, 'year'),\n    canBuyFromSto: true,\n    isAccredited: false\n}\n\nconst WhitelistForm = Form.create({ name: 'form_in_modal' })(\n    class extends React.Component {\n\n        render() {\n            const { visible,\n                onCancel,\n                onOk, form,\n                awaitingConfirmation,\n                editedRecord,\n                shareholderExists\n            } = this.props;\n            let defaultValues = editedRecord || defaultShareholderValues;\n            \n            const { getFieldDecorator } = form;\n            return ( \n            <Modal\n                title={editedRecord ? \"Edit shareholder\" : \"Add a new shareholder\"}\n                okText=\"Save\"\n                visible={visible}\n                onCancel={onCancel}\n                onOk={onOk}\n                confirmLoading={awaitingConfirmation}\n            >\n                <Spin spinning={awaitingConfirmation} size=\"large\">\n                <Form {...formItemLayout}>\n                    <Item name=\"address\" label=\"Address\">\n                        {getFieldDecorator('address', {\n                            rules: [\n                                { required: true  },\n                                {\n                                    validator: (rule, value, callback) => {\n                                        if (!editedRecord && !web3Utils.isAddress(value)) {\n                                            callback('Address is invalid')\n                                            return;\n                                        }\n                                        callback()\n                                        return;\n                                    }\n                                },\n                                {\n                                    validator: (rule, value, callback) => {\n                                        if (!editedRecord && shareholderExists(value)) {\n                                            callback('Shareholder is already present in the whitelist')\n                                            return;\n                                        }\n                                        callback()\n                                        return;\n                                    }\n                                }\n                            ],\n                            initialValue: defaultValues.address\n                        })(\n                            <Input disabled={!!editedRecord}/>\n                        )}\n                    </Item>\n                    <Item name=\"canSendAfter\"  label=\"Can Send after\">\n                        {getFieldDecorator('canSendAfter', {\n                            rules: [{ required: true }],\n                            initialValue: defaultValues.canSendAfter\n                        })(\n                            <DatePicker />\n                        )}\n                    </Item>\n                    <Item name=\"canReceiveAfter\" label=\"Can Receive adter\">\n                        {getFieldDecorator('canReceiveAfter', {\n                            rules: [{ required: true }],\n                            initialValue: defaultValues.canReceiveAfter\n                        })(\n                            <DatePicker />\n                        )}\n                    </Item>\n                    <Item name=\"kycExpiry\" label=\"KYC Expiry\">\n                        {getFieldDecorator('kycExpiry', {\n                            rules: [{ required: true }],\n                            initialValue: defaultValues.kycExpiry\n                        })(\n                            <DatePicker />\n                        )}\n                    </Item>\n                    <Item name=\"canBuyFromSto\" label=\"Can Buy from STO\">\n                        {getFieldDecorator('canBuyFromSto', {\n                            valuePropName: 'checked',\n                            initialValue: defaultValues.canBuyFromSto\n                        })(\n                            <Checkbox/>\n                        )}\n                    </Item>\n                    <Item name=\"isAccredited\" label=\"Accredited\">\n                        {getFieldDecorator('isAccredited', {\n                            valuePropName: 'checked',\n                            initialValue: defaultValues.isAccredited\n                        })(\n                            <Checkbox />\n                        )}\n                    </Item>\n                </Form>\n                </Spin>\n            </Modal>\n        )}\n    }\n);\n\nexport default class Whitelist extends React.Component {\n    state = {\n        editIndex: '',\n        visible: false,\n        awaitingConfirmation: false,\n    }\n\n    closeForm = () => {\n        this.setState({\n            editIndex: '',\n            visible: false,\n            awaitingConfirmation: false\n        });\n        const { form } = this.formRef.props;\n        form.resetFields();\n    }\n\n    openForm = (index = '') => {\n        this.setState({\n            visible: true,\n            editIndex: index\n        });\n    }\n\n    submitForm = async () => {\n        const { form } = this.formRef.props;\n        const { modifyWhitelist } = this.props;\n        form.validateFields(async (err, values) => {\n            if (err) {\n                return;\n            }\n\n            this.setState({ awaitingConfirmation: true })\n        \n            values.canSendAfter = values.canSendAfter.toDate();\n            values.canReceiveAfter = values.canReceiveAfter.toDate();\n            values.kycExpiry = values.kycExpiry.toDate();\n\n            try {\n                await modifyWhitelist([values]);\n                this.setState({\n                    visible: false,\n                    awaitingConfirmation: false,\n                    editIndex: ''\n                });\n                form.resetFields();\n            }\n            catch (error) {\n                this.setState({\n                    awaitingConfirmation: false,\n                });\n                message.error(error.message)\n            }\n        });\n    };\n\n    saveFormRef = formRef => {\n        this.formRef = formRef;\n    };\n\n    shareholderExists = (address) => {\n        const { shareholders } = this.props\n        const ret =  shareholders.find((element) => element.address.toUpperCase() === address.toUpperCase())\n         !== undefined\n        return ret\n    }\n    \n    render() {\n        const { visible, awaitingConfirmation, editIndex } = this.state;\n        \n        const { shareholders, deleteShareholders } = this.props;\n        let editedRecord = shareholders.filter(shareholder => shareholder.address === editIndex)[0]\n\n        return <div style={{display: 'flex', flexDirection: 'column'}}>\n            <Button type=\"primary\" style={{marginBottom: 20, alignSelf: 'flex-end'}} onClick={() => this.openForm()}>Add new</Button>\n            <Table dataSource={shareholders} rowKey=\"address\">\n                <Column\n                    title='Address'\n                    dataIndex='address'\n                    key='address'\n                    render={(text) => <Text>{web3Utils.toChecksumAddress(text)}</Text>}\n                />\n                <Column\n                    title='Can send after'\n                    dataIndex='canSendAfter'\n                    key='canSendAfter'\n                    render={(text) => formatDate(text)}\n                />\n                <Column\n                    title='Can receive after'\n                    dataIndex='canReceiveAfter'\n                    key='canReceiveAfter'\n                    render={(text) => formatDate(text)}\n                />\n                <Column\n                    title='KYC expiry'\n                    dataIndex='kycExpiry'\n                    key='kycExpiry'\n                    render={(text) => formatDate(text)}\n                />\n                <Column\n                    title='Can buy from STO'\n                    dataIndex='canBuyFromSto'\n                    key='canBuyFromSto'\n                    render={(text) => formatBool(text)}\n                />\n                <Column\n                    title='Is accredited'\n                    dataIndex='isAccredited'\n                    key='isAccredited'\n                    render={(text) => formatBool(text)}\n                />\n                <Column render={(text, record) => {\n                    return (\n                        <Fragment>\n                            <Button onClick={() => this.openForm(record.address)}>\n                                <Icon type=\"edit\" theme=\"filled\" />\n                            </Button>\n                            {/* <Button onClick={() => deleteShareholders([record])}>\n                                <Icon type=\"delete\" theme=\"filled\" />\n                            </Button> */}\n                        </Fragment>\n                    )\n                }}/>\n            </Table>\n            <WhitelistForm \n                wrappedComponentRef={this.saveFormRef}\n                visible={visible}\n                onCancel={this.closeForm}\n                onOk={this.submitForm}\n                awaitingConfirmation={awaitingConfirmation}\n                editedRecord={editedRecord}\n                shareholderExists={this.shareholderExists}\n            />\n        </div>;\n    }\n}","export const networkConfigs = {\n    1: {\n        polymathRegistryAddress: '0xdfabf3e4793cd30affb47ab6fa4cf4eef26bbc27'\n    },\n    42: {\n        polymathRegistryAddress: '0x5b215a7d39ee305ad28da29bf2f0425c6c2a00b3'\n    },\n};","export default {\n    CONNECTING: 'connecting',\n    CONNECTED: 'connected',\n    CONNECTION_ERROR: 'connection_error',\n    RESET: 'reset',\n    ERROR: 'error',\n    SHAREHOLDERS_FETCHED: 'shareholders_fetched',\n    TOKEN_SELECTED: 'token_selected',\n}"],"sourceRoot":""}